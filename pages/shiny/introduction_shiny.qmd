---
title: "Introduction √† Shiny"

lang: fr
categories:
  - shiny
---

Shiny est un `package` qui permet de cr√©er facilement des applications web interactives, enti√®rement en R, sans n√©cessit√© de connaissances en HTML, CSS ou JavaScript. Il fournit un ensemble d‚Äôoutils puissants pour concevoir des interfaces dynamiques et r√©actives, facilitant ainsi l‚Äôexploration et la visualisation des donn√©es en temps r√©el. Les applications Shiny peuvent √™tre ensuite d√©ploy√©es localement, sur un server ou via des plateformes comme ShinyApps.io, permettant ainsi de partager des analyses avec d'autres utilisateurs de mani√®re simple et efficace.

![Exemple d'application Shiny d√©velopp√© avec R](image_shiny/exemple_introduction.gif){fig-align="center" width="417"}

# Origine

Ce framework web, gratuit et open source, a √©t√© annonc√© en 2012 par Joe Cheng, directeur technique de Posit (anciennement RStudio). Con√ßu pour simplifier le d√©veloppement d‚Äôapplications web interactives, il √©tait initialement disponible en R, mais depuis 2022, il peut √©galement √™tre utilis√© avec Python. L'un des usages courants de Shiny est le prototypage rapide.

::: {.callout-note collapse="true"}
# Framework

Structure logicielle qui fournit un ensemble d'outils, de biblioth√®ques et de bonnes pratiques pour faciliter le d√©veloppement d'applications. Il sert de socle sur lequel nous pouvons construire un projet sans repartir de z√©ro.
:::

::: {.callout-note collapse="true"}
# Prototypage rapide

Capacit√© √† concevoir et √† tester rapidementt des applications, sans avoir √† passer par un d√©veloppement web traditionnel impliquant HTML, CSS, JS ...
:::

L'impl√©mentation distincte de Shiny annonc√© en 2022 ne vise pas √† remplacer la version R. Les deux versions sont d√©velopp√©es en parall√®le et pourraient ne jamais inclure les m√™mes fonctionnalit√©s.

# Avantages

Shiny est beaucoup plus utilis√© qu'on ne le pense. Entreprises, chercheurs, institutions acad√©miques ou encore organisations gouvernementales l'utilisent pour cr√©er des applications web interactives.

En effet, Shiny est gratuit et open-source ce qui en fait un outil accessible et flexible. D√©velopper une application interactive et visuellement attrayante devient relativement simple lorsqu'on ma√Ætrise R üòâ. Dans le cas √©ch√©ant, pas d'inqui√©tude, de nombreux exemples et templates existent. Vous pourrez les r√©utiliser et les adapter √† votre projet.

Un des principaux avantages de Shiny est qu'il est bas√© sur R et int√©gr√© √† RStudio, ce qui permet d'incorporer toutes les fonctionnalit√©s d'analyse de R dans les applications."

Enfin, les applications sont compl√®tement personnalisables avec du HTML et du CSS, qui sont les langages de base pour la cr√©ation de pages web.

En revanche, Shiny est sp√©cifiquement con√ßu pour R, ce qui peut poser des difficult√©s pour ceux qui ne sont pas familiers avec ce langage. De plus, compar√© √† d'autres frameworks, Shiny peut √™tre un peu limit√© en termes de personnalisation du front-end et de scalabilit√©.

# Comment √ßa marche ?

Tout d'abord, le code d'une application Shiny est contenu dans un fichier au format `.R`. L'anatomie de ce fichier est particuli√®re, aucune inqui√©tude, elle est en r√©alit√© tr√®s simple.

Elle se divise en deux parties principales :

-   **User Interface (ui)** : Cette partie regroupe tous les √©l√©ments visibles par l'utilisateur, tels que le titre, les composants, la mise en forme, les boutons... Concr√®tement, dans le langage des d√©veloppeurs, c'est le `front` de l'application. C'est tout ce que l'utilisateur de l'application voit et avec quoi il interagit. Cette partie contr√¥le la pr√©sentation et l'apparence de l'application.

-   **Server function (server)** : La partie `server` contient toutes les instructions n√©cessaires au fonctionnement de l'application. Dans le langage des d√©veloppeurs, elle correspond au `back-end`\`, c'est-√†-dire la partie de l'application qui g√®re la logique, les calculs et les donn√©es. Elle contient le code qui d√©finit comment r√©agir aux actions de l'utilisateur.

``` r
ui <- fluidPage()

server <- function(input, output, session) {}

shinyApp(ui, server)
```

L'instruction `shinyApp(ui, server)` permet de lancer une application Shiny en combinant l'interface utilisateur (ui) et la logique serveur (server). Lorsqu'on ex√©cute cette commande, l'application Shiny d√©marre et devient interactive.

On se retrouve ici pour un tutoriel et pour r√©aliser votre premi√®re application !
