[
  {
    "objectID": "exercice.html",
    "href": "exercice.html",
    "title": "PratiqueR en action !",
    "section": "",
    "text": "La pratique constitue l‚Äô√©tape la plus importante dans l‚Äôapprentissage d‚Äôun langage de programmation. C‚Äôest en pratiquant que vous pourrez devenir habile et rus√© comme un renard.\nVous trouverez ci-dessous des exercices, aidez-vous des fonctions et ressources pr√©sente sur le site.\n\n\n\n\n\n\n    \n      \n      \n    \n\n\n\n\n\nAucun article correspondant"
  },
  {
    "objectID": "fonctions/agregation/somme.html",
    "href": "fonctions/agregation/somme.html",
    "title": "SUM()",
    "section": "",
    "text": "La fonction sum(), permet de calculer la somme des √©l√©ments d‚Äôun objet num√©rique (vecteur, matrice, variable ‚Ä¶). Elle n‚Äôadditionne que les valeurs num√©riques et ignore automatiquement les valeurs manquantes (NA).",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SUM()"
    ]
  },
  {
    "objectID": "fonctions/agregation/somme.html#syntaxe",
    "href": "fonctions/agregation/somme.html#syntaxe",
    "title": "SUM()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction se fait de mani√®re simple en indiquant les valeurs ou la variable √† additionner. Voici la syntaxe de base pour additionner les √©l√©ments d‚Äôune variable dans un data frame, par exemple :\n---\nsum(data$ma_variable)\n---",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SUM()"
    ]
  },
  {
    "objectID": "fonctions/agregation/somme.html#exemple",
    "href": "fonctions/agregation/somme.html#exemple",
    "title": "SUM()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction sum() pour additionner plusieurs chiffres. Il suffit de passer les nombres dans la fonction, en les s√©parant par des virgules. La fonction calcule ensuite la somme de ces nombres.\n---\nsum(1,2,3)\n---\n\n\n[1] 6\n\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SUM()"
    ]
  },
  {
    "objectID": "contact.html",
    "href": "contact.html",
    "title": "Contactez-nous ! üì©",
    "section": "",
    "text": "Si vous avez des questions, des suggestions ou si vous souhaitez collaborer, n‚Äôh√©sitez pas √† nous contacter via le formulaire ci-dessous ou sur nos r√©seaux sociaux.\n\n\n\n  Nom :\n  \n\n  Email :\n  \n\n  Message :\n  \n\n  Envoyer\n\n\nüîó Nos r√©seaux\nRetrouvez-nous sur nos r√©seaux et suivez nos derni√®res actualit√©s :\n\n\n\n  \n    üê¶ Twitter\n  \n  \n    üë®‚Äçüíª GitHub\n  \n  \n    üîó LinkedIn"
  },
  {
    "objectID": "contact.html#education",
    "href": "contact.html#education",
    "title": "Rachid Sahli",
    "section": "Education",
    "text": "Education\nUniversity of California, San Diego | San Diego, CA PhD in Mathematics | Sept 2011 - June 2015\nMacalester College | St.¬†Paul, MN B.A in Economics | Sept 2007 - June 2011"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Bienvenue sur PratiqueR ! üöÄ",
    "section": "",
    "text": "PratiqueR est votre nouvel espace d‚Äôapprentissage interactif. Que vous soyez un d√©butant curieux ou un expert en qu√™te de perfectionnement, ce site est con√ßu pour vous !\nIci, vous trouverez des exercices pratiques, des tutoriels d√©taill√©s, des astuces et des bonnes pratiques pour devenir un ma√Ætre de R."
  },
  {
    "objectID": "index.html#pourquoi-pratiquer",
    "href": "index.html#pourquoi-pratiquer",
    "title": "Bienvenue sur PratiqueR ! üöÄ",
    "section": "",
    "text": "PratiqueR est votre nouvel espace d‚Äôapprentissage interactif d√©di√© au langage R. Que vous soyez d√©butant ou exp√©riment√©, ce site vous accompagne dans votre progression en mettant l‚Äôaccent sur la pratique et l‚Äôexp√©rimentation."
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "Blog",
    "section": "",
    "text": "No matching items"
  },
  {
    "objectID": "contact.html#contactez-nous",
    "href": "contact.html#contactez-nous",
    "title": "Contact",
    "section": "",
    "text": "Si vous avez des questions, des suggestions ou si vous souhaitez collaborer, n‚Äôh√©sitez pas √† nous contacter via le formulaire ci-dessous ou sur nos r√©seaux sociaux."
  },
  {
    "objectID": "fonctions/agregation/maximum.html",
    "href": "fonctions/agregation/maximum.html",
    "title": "MAX()",
    "section": "",
    "text": "La fonction max() permet de calculer la valeur maximale d‚Äôun objet num√©rique (vecteur, matrice, variable‚Ä¶). Elle renvoie la plus grande valeur parmi celles pr√©sentes dans l‚Äôobjet, en ignorant automatiquement les valeurs manquantes (NA) si sp√©cifi√©.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MAX()"
    ]
  },
  {
    "objectID": "fonctions/agregation/maximum.html#exemple",
    "href": "fonctions/agregation/maximum.html#exemple",
    "title": "MAX()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction max() pour obtenir la valeur maximale parmi plusieurs chiffres. Il suffit de passer les nombres dans la fonction, en les s√©parant par des virgules. La fonction calcule ensuite la plus grande valeur parmi ces nombres.\n---\nmax(1,2,3)\n---\n\n\n[1] 3\n\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MAX()"
    ]
  },
  {
    "objectID": "fonctions/agregation/maximum.html#exemple-1-1",
    "href": "fonctions/agregation/maximum.html#exemple-1-1",
    "title": "MAX()",
    "section": "Exemple 1",
    "text": "Exemple 1\nDans ce premier exemple, nous allons utiliser la fonction max() pour obtenir la valeur maximale parmi plusieurs chiffres. Il suffit de passer les nombres dans la fonction, en les s√©parant par des virgules. La fonction calcule ensuite la plus grande valeur parmi ces nombres.\n---\nmax(1,2,3)\n---\n\n\n[1] 3",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MAX()"
    ]
  },
  {
    "objectID": "fonctions/agregation/maximum.html#example-2",
    "href": "fonctions/agregation/maximum.html#example-2",
    "title": "MAX()",
    "section": "Example 2",
    "text": "Example 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MAX()"
    ]
  },
  {
    "objectID": "fonctions/agregation/maximum.html#exemple-1",
    "href": "fonctions/agregation/maximum.html#exemple-1",
    "title": "MAX()",
    "section": "Exemple 1",
    "text": "Exemple 1\nDans ce premier exemple, nous allons utiliser la fonction max() pour obtenir la valeur maximale parmi plusieurs chiffres. Il suffit de passer les nombres dans la fonction, en les s√©parant par des virgules. La fonction calcule ensuite la plus grande valeur parmi ces nombres.\n---\nmax(1,2,3)\n---\n\n\n[1] 3",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MAX()"
    ]
  },
  {
    "objectID": "fonctions/agregation/somme.html#exemple-1",
    "href": "fonctions/agregation/somme.html#exemple-1",
    "title": "SUM()",
    "section": "Exemple 1",
    "text": "Exemple 1\nDans ce premier exemple, nous allons utiliser la fonction sum() pour additionner plusieurs chiffres. Il suffit de passer les nombres dans la fonction, en les s√©parant par des virgules. La fonction calcule ensuite la somme de ces nombres.\n---\nsum(1,2,3)\n---\n\n\n[1] 6",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SUM()"
    ]
  },
  {
    "objectID": "fonctions/agregation/somme.html#exemple-2",
    "href": "fonctions/agregation/somme.html#exemple-2",
    "title": "SUM()",
    "section": "Exemple 2",
    "text": "Exemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SUM()"
    ]
  },
  {
    "objectID": "fonctions/agregation/maximum.html#syntaxe",
    "href": "fonctions/agregation/maximum.html#syntaxe",
    "title": "MAX()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction est simple, il suffit d‚Äôindiquer les valeurs ou la variable pour laquelle vous souhaitez trouver la valeur maximale. Voici la syntaxe de base pour obtenir la valeur maximale d‚Äôune variable dans un data frame, par exemple :\n---\nmax(data$ma_variable)\n---",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MAX()"
    ]
  },
  {
    "objectID": "fonctions/agregation/minimum.html",
    "href": "fonctions/agregation/minimum.html",
    "title": "MIN()",
    "section": "",
    "text": "La fonction min() permet de calculer la valeur minimale d‚Äôun objet num√©rique (vecteur, matrice, variable ‚Ä¶). Elle renvoie la plus petite valeur parmi celles pr√©sentes dans l‚Äôobjet, en ignorant automatiquement les valeurs manquantes (NA) si sp√©cifi√©.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MIN()"
    ]
  },
  {
    "objectID": "fonctions/agregation/minimum.html#syntaxe",
    "href": "fonctions/agregation/minimum.html#syntaxe",
    "title": "MIN()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction est simple, il suffit d‚Äôindiquer les valeurs ou la variable pour laquelle vous souhaitez trouver la valeur minimale. Voici la syntaxe de base pour obtenir la valeur minimale d‚Äôune variable dans un data frame, par exemple :\n---\nmin(data$ma_variable)\n---",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MIN()"
    ]
  },
  {
    "objectID": "fonctions/agregation/minimum.html#exemple",
    "href": "fonctions/agregation/minimum.html#exemple",
    "title": "MIN()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction min() pour obtenir la valeur minimale parmi plusieurs chiffres. Il suffit de passer les nombres dans la fonction, en les s√©parant par des virgules. La fonction calcule ensuite la plus petite valeur parmi ces nombres.\n---\nmin(1,2,3)\n---\n\n\n[1] 1\n\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MIN()"
    ]
  },
  {
    "objectID": "fonctions/agregation/length.html",
    "href": "fonctions/agregation/length.html",
    "title": "LENGTH()",
    "section": "",
    "text": "La fonction length() permet d‚Äôobtenir le nombre d‚Äô√©l√©ments contenus dans un objet (vecteur, liste, colonne d‚Äôun data frame‚Ä¶). Elle est couramment utilis√©e pour conna√Ætre la taille d‚Äôun vecteur ou le nombre d‚Äôobservations d‚Äôune variable.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "LENGTH()"
    ]
  },
  {
    "objectID": "fonctions/agregation/length.html#syntaxe",
    "href": "fonctions/agregation/length.html#syntaxe",
    "title": "LENGTH()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction est simple : il suffit d‚Äôindiquer l‚Äôobjet dont on souhaite conna√Ætre la taille. Voici la syntaxe de base pour obtenir la longueur d‚Äôun vecteur ou d‚Äôune variable d‚Äôun data frame :\n---\nlength(data$ma_variable)\n---",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "LENGTH()"
    ]
  },
  {
    "objectID": "fonctions/agregation/length.html#exemple",
    "href": "fonctions/agregation/length.html#exemple",
    "title": "LENGTH()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction length() pour conna√Ætre le nombre d‚Äô√©l√©ments d‚Äôun vecteur num√©rique.\n---\nlength(c(1,2,3,4,5))\n---\n\n\n[1] 5\n\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "LENGTH()"
    ]
  },
  {
    "objectID": "fonctions/agregation/moyenne.html",
    "href": "fonctions/agregation/moyenne.html",
    "title": "MEAN()",
    "section": "",
    "text": "La fonction mean() permet de calculer la moyenne arithm√©tique des √©l√©ments d‚Äôun objet num√©rique (vecteur, matrice, variable ‚Ä¶). Elle additionne les valeurs num√©riques et les divise par leur nombre total. Par d√©faut, les valeurs manquantes (NA) ne sont pas ignor√©es et renvoient un r√©sultat NA.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MEAN()"
    ]
  },
  {
    "objectID": "fonctions/agregation/moyenne.html#syntaxe",
    "href": "fonctions/agregation/moyenne.html#syntaxe",
    "title": "MEAN()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction est simple : il suffit d‚Äôindiquer les valeurs ou la variable dont on souhaite calculer la moyenne. Voici la syntaxe de base pour obtenir la moyenne d‚Äôune variable dans un data frame :\n---\nmean(data$ma_variable)\n---",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MEAN()"
    ]
  },
  {
    "objectID": "fonctions/agregation/moyenne.html#exemple",
    "href": "fonctions/agregation/moyenne.html#exemple",
    "title": "MEAN()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction mean() pour calculer la moyenne de plusieurs chiffres. Il suffit de passer les nombres dans la fonction, en les s√©parant par des virgules. La fonction calcule ensuite la moyenne de ces nombres.\n---\nmean(1,2,3,4,5)\n---\n\n\n[1] 1\n\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MEAN()"
    ]
  },
  {
    "objectID": "fonctions/agregation/mediane.html",
    "href": "fonctions/agregation/mediane.html",
    "title": "MEDIAN()",
    "section": "",
    "text": "La fonction median() permet de calculer la m√©diane d‚Äôun ensemble de valeurs num√©riques. La m√©diane est la valeur centrale d‚Äôun ensemble de nombres tri√©s dans l‚Äôordre croissant. Si le nombre d‚Äô√©l√©ments est impair, la m√©diane est le nombre du milieu. Si le nombre d‚Äô√©l√©ments est pair, la m√©diane est la moyenne des deux valeurs centrales.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MEDIAN()"
    ]
  },
  {
    "objectID": "fonctions/agregation/mediane.html#syntaxe",
    "href": "fonctions/agregation/mediane.html#syntaxe",
    "title": "MEDIAN()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction est simple : il suffit d‚Äôindiquer les valeurs ou la variable dont on souhaite obtenir la m√©diane. Voici la syntaxe de base pour calculer la m√©diane d‚Äôune variable dans un data frame :\n---\nmedian(data$ma_variable)\n---",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MEDIAN()"
    ]
  },
  {
    "objectID": "fonctions/agregation/mediane.html#exemple",
    "href": "fonctions/agregation/mediane.html#exemple",
    "title": "MEDIAN()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction median() pour obtenir la valeur centrale d‚Äôun ensemble de chiffres. Il suffit de passer les nombres dans la fonction, en les s√©parant par des virgules. La fonction trie les valeurs et retourne la m√©diane.\n---\nmedian(c(1,3,5,7,9))\n---\n\n\n[1] 5\n\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MEDIAN()"
    ]
  },
  {
    "objectID": "fonctions/agregation/sd.html",
    "href": "fonctions/agregation/sd.html",
    "title": "SD()",
    "section": "",
    "text": "La fonction sd() permet de calculer l‚Äô√©cart-type d‚Äôun ensemble de valeurs num√©riques. L‚Äô√©cart-type mesure la dispersion des donn√©es autour de leur moyenne. Plus l‚Äô√©cart-type est √©lev√©, plus les valeurs sont dispers√©es.\nL‚Äô√©cart-type (\\(\\sigma\\) pour une population, \\(s\\) pour un √©chantillon) est d√©fini par la formule suivante :\n\\[\ns = \\sqrt{\\frac{1}{n-1} \\sum_{i=1}^{n} (x_i - \\bar{x})^2}\n\\]\no√π :",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SD()"
    ]
  },
  {
    "objectID": "fonctions/agregation/sd.html#syntaxe",
    "href": "fonctions/agregation/sd.html#syntaxe",
    "title": "SD()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction est simple : il suffit d‚Äôindiquer les valeurs ou la variable dont on souhaite obtenir l‚Äô√©cart-type. Voici la syntaxe de base pour calculer l‚Äô√©cart-type d‚Äôune variable dans un data frame :\nsd(data$ma_variable)",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SD()"
    ]
  },
  {
    "objectID": "fonctions/agregation/sd.html#exemple",
    "href": "fonctions/agregation/sd.html#exemple",
    "title": "SD()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction sd() pour calculer l‚Äô√©cart-type d‚Äôun ensemble de chiffres. Il suffit de passer les nombres sous forme d‚Äôun vecteur dans la fonction.\n---\nsd(c(1,2,3,4,5))\n---\n\n\n[1] 1.581139\n\n\nIci, l‚Äô√©cart-type est 1.58, ce qui indique la dispersion des valeurs autour de leur moyenne.\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SD()"
    ]
  },
  {
    "objectID": "fonctions/agregation/variance.html",
    "href": "fonctions/agregation/variance.html",
    "title": "VAR()",
    "section": "",
    "text": "La fonction var() permet de calculer la variance d‚Äôun ensemble de valeurs num√©riques. La variance mesure la dispersion des donn√©es autour de leur moyenne. Plus la variance est √©lev√©e, plus les valeurs sont dispers√©es.\nLa variance (\\(sigma^2\\) pour une population, \\(s^2\\) pour un √©chantillon) est d√©finie par la formule suivante :\n\\[\ns^2 = \\frac{1}{n-1} \\sum_{i=1}^{n} (x_i - \\bar{x})^2\n\\]\no√π :",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "VAR()"
    ]
  },
  {
    "objectID": "fonctions/agregation/variance.html#syntaxe",
    "href": "fonctions/agregation/variance.html#syntaxe",
    "title": "VAR()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction est simple : il suffit d‚Äôindiquer les valeurs ou la variable dont on souhaite obtenir la variance. Voici la syntaxe de base pour calculer la variance d‚Äôune variable dans un data frame :\nvar(data$ma_variable)",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "VAR()"
    ]
  },
  {
    "objectID": "fonctions/agregation/variance.html#exemple",
    "href": "fonctions/agregation/variance.html#exemple",
    "title": "VAR()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction var() pour calculer la variance d‚Äôun ensemble de chiffres. Il suffit de passer les nombres sous forme d‚Äôun vecteur dans la fonction.\n---\nvar(c(1,2,3,4,5))\n---\n\n\n[1] 2.5\n\n\nIci, la variance est 2.5, ce qui repr√©sente la dispersion des valeurs autour de leur moyenne.\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "VAR()"
    ]
  },
  {
    "objectID": "index.html#ce-que-vous-allez-trouver-ici",
    "href": "index.html#ce-que-vous-allez-trouver-ici",
    "title": "Bienvenue sur PratiqueR ! üöÄ",
    "section": "Ce que vous allez trouver ici",
    "text": "Ce que vous allez trouver ici\n‚ú® Des tutoriels progressifs : Des bases aux concepts avanc√©s, explorez les fondamentaux de R en toute simplicit√©.\nüìä Des cas pratiques : Appliquez vos connaissances √† travers des exemples concrets et des probl√®mes r√©els.\nüí° Des fiches fonction & package : Comprenez et ma√Ætrisez les outils essentiels du langage R.\nüéØ Des d√©fis et quiz interactifs : Testez vos comp√©tences et mettez-vous √† l‚Äô√©preuve !"
  },
  {
    "objectID": "index.html#commencez-d√®s-maintenant",
    "href": "index.html#commencez-d√®s-maintenant",
    "title": "Bienvenue sur PratiqueR ! üöÄ",
    "section": "Commencez d√®s maintenant !",
    "text": "Commencez d√®s maintenant !\nüöÄ Naviguez dans les sections et choisissez votre premier exercice !\nüìö Vous cherchez une fonction sp√©cifique ? Consultez notre r√©pertoire des fonctions.\nüìù Besoin d‚Äôun guide pas √† pas ? Explorez nos tutoriels d√©taill√©s.\nüî• Pr√™t √† relever un d√©fi ? Lancez-vous dans nos exercices pratiques !\nR est un outil puissant ‚Äì ma√Ætrisez-le avec PratiqueR !"
  },
  {
    "objectID": "fonctions/agregation/prod.html",
    "href": "fonctions/agregation/prod.html",
    "title": "PROD()",
    "section": "",
    "text": "La fonction prod() permet de calculer le produit des √©l√©ments d‚Äôun objet num√©rique (vecteur, matrice, variable ‚Ä¶). Elle multiplie uniquement les valeurs num√©riques et ignore automatiquement les valeurs manquantes (NA).",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "PROD()"
    ]
  },
  {
    "objectID": "fonctions/agregation/quantile.html",
    "href": "fonctions/agregation/quantile.html",
    "title": "QUANTILE()",
    "section": "",
    "text": "La fonction quantile() permet de calculer les quantiles d‚Äôun ensemble de valeurs num√©riques. Un quantile est une valeur qui divise les donn√©es en segments √©gaux.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "QUANTILE()"
    ]
  },
  {
    "objectID": "fonctions/agregation/quantile.html#syntaxe",
    "href": "fonctions/agregation/quantile.html#syntaxe",
    "title": "QUANTILE()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de la fonction se fait en fournissant un vecteur num√©rique ainsi qu‚Äôun vecteur de probabilit√©s correspondant aux quantiles souhait√©s. Par d√©faut, la fonction retourne les quartiles (0%, 25%, 50%, 75%, 100%), mais il est possible de sp√©cifier d‚Äôautres probabilit√©s.\n---\nquantile(data$ma_variable) # Variable au format numeric uniquement !\n---",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "QUANTILE()"
    ]
  },
  {
    "objectID": "fonctions/agregation/quantile.html#exemple",
    "href": "fonctions/agregation/quantile.html#exemple",
    "title": "QUANTILE()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nCalculons les quartiles d‚Äôun ensemble de donn√©es :\n---\nquantile(c(10, 20, 30, 40, 50)) # Par d√©faut, les quartiles sont : 0%, 25%, 50%, 75%, 100%\n---\n\n\n  0%  25%  50%  75% 100% \n  10   20   30   40   50 \n\n\nEssayons avec une probabilit√© diff√©rente, sp√©cifi√© avec le pram√®tre probs = :\n---\nquantile(c(10, 20, 30, 40, 50), probs = 0.80) # Probabilit√© : 80%\n---\n\n\n80% \n 42 \n\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "QUANTILE()"
    ]
  },
  {
    "objectID": "fonctions/agregation/prod.html#syntaxe",
    "href": "fonctions/agregation/prod.html#syntaxe",
    "title": "PROD()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction est simple : il suffit d‚Äôindiquer les valeurs ou la variable contenant les √©l√©ments √† multiplier.\n---\nprod(data$ma_variable)\n---",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "PROD()"
    ]
  },
  {
    "objectID": "fonctions/agregation/prod.html#exemple",
    "href": "fonctions/agregation/prod.html#exemple",
    "title": "PROD()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans cet exemple, nous allons utiliser la fonction prod() pour multiplier plusieurs nombres. Il suffit de passer les valeurs dans la fonction, s√©par√©es par des virgules :\n---\nprod(2,3,4)\n---\n\n\n[1] 24\n\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "PROD()"
    ]
  },
  {
    "objectID": "fonctions/agregation/range.html",
    "href": "fonctions/agregation/range.html",
    "title": "RANGE()",
    "section": "",
    "text": "La fonction range() permet d‚Äôobtenir l‚Äô√©tendue d‚Äôun ensemble de valeurs num√©riques, c‚Äôest-√†-dire la plus petite et la plus grande valeur du jeu de donn√©es. Elle est utile pour conna√Ætre rapidement l‚Äôamplitude des donn√©es.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "RANGE()"
    ]
  },
  {
    "objectID": "fonctions/agregation/range.html#syntaxe",
    "href": "fonctions/agregation/range.html#syntaxe",
    "title": "RANGE()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de la fonction range() se fait en lui passant un vecteur num√©rique. Elle renvoie un vecteur de deux √©l√©ments : le minimum et le maximum.\n---\nrange(data$ma_variable)\n---",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "RANGE()"
    ]
  },
  {
    "objectID": "fonctions/agregation/range.html#exemple",
    "href": "fonctions/agregation/range.html#exemple",
    "title": "RANGE()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction range() pour d√©terminer l‚Äô√©tendue d‚Äôun ensemble de nombres. Il suffit de passer les valeurs dans la fonction, et celle-ci renverra le plus petit et le plus grand nombre du jeu de donn√©es.\n---\nrange(5,10,2,8,3)\n---\n\n\n[1]  2 10\n\n\nIci, la valeur minimale est 2 et la valeur maximale est 10.\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "RANGE()"
    ]
  },
  {
    "objectID": "fonctions/agregation/summary.html",
    "href": "fonctions/agregation/summary.html",
    "title": "SUMMARY()",
    "section": "",
    "text": "La fonction summary() permet d‚Äôobtenir un r√©sum√© statistique d‚Äôun jeu de donn√©es ou d‚Äôun vecteur num√©rique. Elle affiche des statistiques cl√©s comme la valeur minimale, le premier quartile (Q1), la m√©diane (Q2), la moyenne, le troisi√®me quartile (Q3) et la valeur maximale.\nSi l‚Äôobjet pass√© en argument est un data frame, la fonction retourne un r√©sum√© pour chaque colonne du jeu de donn√©es.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SUMMARY()"
    ]
  },
  {
    "objectID": "fonctions/agregation/summary.html#syntaxe",
    "href": "fonctions/agregation/summary.html#syntaxe",
    "title": "SUMMARY()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de summary() est tr√®s simple. Il suffit de lui passer un vecteur, une colonne d‚Äôun data frame ou un data frame entier.\n---\nsummary(data$ma_variable) # Variable\n\nsummary(data) # Dataframe\n---\nx peut √™tre un vecteur num√©rique, un facteur, un data frame ou m√™me un mod√®le statistique.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SUMMARY()"
    ]
  },
  {
    "objectID": "fonctions/agregation/summary.html#exemple",
    "href": "fonctions/agregation/summary.html#exemple",
    "title": "SUMMARY()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction summary() pour obtenir un r√©sum√© statistique d‚Äôun vecteur num√©rique.\n---\nsummary(c(10,25,30,45,50,60,75))\n---\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  10.00   27.50   45.00   42.14   55.00   75.00 \n\n\nOn peut voir ici que :\n\nLa valeur minimale est 10.\nLe premier quartile (Q1) est 25.\nLa m√©diane (Q2) est 45.\nLa moyenne est 42.14.\nLe troisi√®me quartile (Q3) est 55.\nLa valeur maximale est 75.\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SUMMARY()"
    ]
  },
  {
    "objectID": "fonctions/agregation/table.html",
    "href": "fonctions/agregation/table.html",
    "title": "TABLE()",
    "section": "",
    "text": "La fonction table() permet de calculer la fr√©quence des valeurs pr√©sentes dans un vecteur ou un jeu de donn√©es. Elle est particuli√®rement utile pour analyser la r√©partition des cat√©gories dans un facteur ou une variable qualitative.\nSi plusieurs vecteurs sont pass√©s en argument, table() g√©n√®re un tableau de contingence, utile pour analyser la distribution conjointe de plusieurs variables.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "TABLE()"
    ]
  },
  {
    "objectID": "fonctions/agregation/table.html#syntaxe",
    "href": "fonctions/agregation/table.html#syntaxe",
    "title": "TABLE()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de table() est simple : il suffit de lui passer un vecteur ou plusieurs vecteurs pour obtenir un comptage des valeurs.\ntable(data$ma_variable)\n\ntable(x)\n\ntable(x, y) # Plusieurs vecteurs pour un tableau de contingence\nx est un vecteur (num√©rique, caract√®re ou facteur).",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "TABLE()"
    ]
  },
  {
    "objectID": "fonctions/agregation/table.html#exemple",
    "href": "fonctions/agregation/table.html#exemple",
    "title": "TABLE()",
    "section": "Exemple",
    "text": "Exemple\n\nExemlpe 1\nDans ce premier exemple, nous allons utiliser la fonction table() pour compter la fr√©quence des √©l√©ments d‚Äôun vecteur contenant des cat√©gories.\n---\nfruits &lt;- c(\"Pomme\", \"Banane\", \"Pomme\", \"Orange\", \"Banane\", \"Pomme\", \"Orange\")\n\ntable(fruits)\n---\n\n\nfruits\nBanane Orange  Pomme \n     2      2      3 \n\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "TABLE()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/mediane.html",
    "href": "pages/fonctions/agregation/mediane.html",
    "title": "MEDIAN()",
    "section": "",
    "text": "La fonction median() permet de calculer la m√©diane d‚Äôun ensemble de valeurs num√©riques. La m√©diane est la valeur centrale d‚Äôun ensemble de nombres tri√©s dans l‚Äôordre croissant. Si le nombre d‚Äô√©l√©ments est impair, la m√©diane est le nombre du milieu. Si le nombre d‚Äô√©l√©ments est pair, la m√©diane est la moyenne des deux valeurs centrales.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MEDIAN()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/mediane.html#syntaxe",
    "href": "pages/fonctions/agregation/mediane.html#syntaxe",
    "title": "MEDIAN()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction est simple : il suffit d‚Äôindiquer les valeurs ou la variable dont on souhaite obtenir la m√©diane. Voici la syntaxe de base pour calculer la m√©diane d‚Äôune variable dans un data frame :\n---\nmedian(data$ma_variable)\n---",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MEDIAN()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/mediane.html#exemple",
    "href": "pages/fonctions/agregation/mediane.html#exemple",
    "title": "MEDIAN()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction median() pour obtenir la valeur centrale d‚Äôun ensemble de chiffres. Il suffit de passer les nombres dans la fonction, en les s√©parant par des virgules. La fonction trie les valeurs et retourne la m√©diane.\n---\nmedian(c(1,3,5,7,9))\n---\n\n\n[1] 5\n\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MEDIAN()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/moyenne.html",
    "href": "pages/fonctions/agregation/moyenne.html",
    "title": "MEAN()",
    "section": "",
    "text": "La fonction mean() permet de calculer la moyenne arithm√©tique des √©l√©ments d‚Äôun objet num√©rique (vecteur, matrice, variable ‚Ä¶). Elle additionne les valeurs num√©riques et les divise par leur nombre total. Par d√©faut, les valeurs manquantes (NA) ne sont pas ignor√©es et renvoient un r√©sultat NA.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MEAN()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/moyenne.html#syntaxe",
    "href": "pages/fonctions/agregation/moyenne.html#syntaxe",
    "title": "MEAN()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction est simple : il suffit d‚Äôindiquer les valeurs ou la variable dont on souhaite calculer la moyenne. Voici la syntaxe de base pour obtenir la moyenne d‚Äôune variable dans un data frame :\n---\nmean(data$ma_variable)\n---",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MEAN()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/moyenne.html#exemple",
    "href": "pages/fonctions/agregation/moyenne.html#exemple",
    "title": "MEAN()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction mean() pour calculer la moyenne de plusieurs chiffres. Il suffit de passer les nombres dans la fonction, en les s√©parant par des virgules. La fonction calcule ensuite la moyenne de ces nombres.\n---\nmean(1,2,3,4,5)\n---\n\n\n[1] 1\n\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MEAN()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/quantile.html",
    "href": "pages/fonctions/agregation/quantile.html",
    "title": "QUANTILE()",
    "section": "",
    "text": "La fonction quantile() permet de calculer les quantiles d‚Äôun ensemble de valeurs num√©riques. Un quantile est une valeur qui divise les donn√©es en segments √©gaux.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "QUANTILE()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/quantile.html#syntaxe",
    "href": "pages/fonctions/agregation/quantile.html#syntaxe",
    "title": "QUANTILE()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de la fonction se fait en fournissant un vecteur num√©rique ainsi qu‚Äôun vecteur de probabilit√©s correspondant aux quantiles souhait√©s. Par d√©faut, la fonction retourne les quartiles (0%, 25%, 50%, 75%, 100%), mais il est possible de sp√©cifier d‚Äôautres probabilit√©s.\n---\nquantile(data$ma_variable) # Variable au format numeric uniquement !\n---",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "QUANTILE()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/quantile.html#exemple",
    "href": "pages/fonctions/agregation/quantile.html#exemple",
    "title": "QUANTILE()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nCalculons les quartiles d‚Äôun ensemble de donn√©es :\n---\nquantile(c(10, 20, 30, 40, 50)) # Par d√©faut, les quartiles sont : 0%, 25%, 50%, 75%, 100%\n---\n\n\n  0%  25%  50%  75% 100% \n  10   20   30   40   50 \n\n\nEssayons avec une probabilit√© diff√©rente, sp√©cifi√© avec le pram√®tre probs = :\n---\nquantile(c(10, 20, 30, 40, 50), probs = 0.80) # Probabilit√© : 80%\n---\n\n\n80% \n 42 \n\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "QUANTILE()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/somme.html",
    "href": "pages/fonctions/agregation/somme.html",
    "title": "SUM()",
    "section": "",
    "text": "La fonction sum(), permet de calculer la somme des √©l√©ments d‚Äôun objet num√©rique (vecteur, matrice, variable ‚Ä¶). Elle n‚Äôadditionne que les valeurs num√©riques et ignore automatiquement les valeurs manquantes (NA).",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SUM()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/somme.html#syntaxe",
    "href": "pages/fonctions/agregation/somme.html#syntaxe",
    "title": "SUM()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction se fait de mani√®re simple en indiquant les valeurs ou la variable √† additionner. Voici la syntaxe de base pour additionner les √©l√©ments d‚Äôune variable dans un data frame, par exemple :\n---\nsum(data$ma_variable)\n---",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SUM()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/somme.html#exemple",
    "href": "pages/fonctions/agregation/somme.html#exemple",
    "title": "SUM()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction sum() pour additionner plusieurs chiffres. Il suffit de passer les nombres dans la fonction, en les s√©parant par des virgules. La fonction calcule ensuite la somme de ces nombres.\n---\nsum(1,2,3)\n---\n\n\n[1] 6\n\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SUM()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/length.html",
    "href": "pages/fonctions/agregation/length.html",
    "title": "LENGTH()",
    "section": "",
    "text": "La fonction length() permet d‚Äôobtenir le nombre d‚Äô√©l√©ments contenus dans un objet (vecteur, liste, colonne d‚Äôun data frame‚Ä¶). Elle est couramment utilis√©e pour conna√Ætre la taille d‚Äôun vecteur ou le nombre d‚Äôobservations d‚Äôune variable.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "LENGTH()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/length.html#syntaxe",
    "href": "pages/fonctions/agregation/length.html#syntaxe",
    "title": "LENGTH()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction est simple : il suffit d‚Äôindiquer l‚Äôobjet dont on souhaite conna√Ætre la taille. Voici la syntaxe de base pour obtenir la longueur d‚Äôun vecteur ou d‚Äôune variable d‚Äôun data frame :\n---\nlength(data$ma_variable)\n---",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "LENGTH()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/length.html#exemple",
    "href": "pages/fonctions/agregation/length.html#exemple",
    "title": "LENGTH()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction length() pour conna√Ætre le nombre d‚Äô√©l√©ments d‚Äôun vecteur num√©rique.\n---\nlength(c(1,2,3,4,5))\n---\n\n\n[1] 5\n\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "LENGTH()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/summary.html",
    "href": "pages/fonctions/agregation/summary.html",
    "title": "SUMMARY()",
    "section": "",
    "text": "La fonction summary() permet d‚Äôobtenir un r√©sum√© statistique d‚Äôun jeu de donn√©es ou d‚Äôun vecteur num√©rique. Elle affiche des statistiques cl√©s comme la valeur minimale, le premier quartile (Q1), la m√©diane (Q2), la moyenne, le troisi√®me quartile (Q3) et la valeur maximale.\nSi l‚Äôobjet pass√© en argument est un data frame, la fonction retourne un r√©sum√© pour chaque colonne du jeu de donn√©es.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SUMMARY()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/summary.html#syntaxe",
    "href": "pages/fonctions/agregation/summary.html#syntaxe",
    "title": "SUMMARY()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de summary() est tr√®s simple. Il suffit de lui passer un vecteur, une colonne d‚Äôun data frame ou un data frame entier.\n---\nsummary(data$ma_variable) # Variable\n\nsummary(data) # Dataframe\n---\nx peut √™tre un vecteur num√©rique, un facteur, un data frame ou m√™me un mod√®le statistique.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SUMMARY()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/summary.html#exemple",
    "href": "pages/fonctions/agregation/summary.html#exemple",
    "title": "SUMMARY()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction summary() pour obtenir un r√©sum√© statistique d‚Äôun vecteur num√©rique.\n---\nsummary(c(10,25,30,45,50,60,75))\n---\n\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  10.00   27.50   45.00   42.14   55.00   75.00 \n\n\nOn peut voir ici que :\n\nLa valeur minimale est 10.\nLe premier quartile (Q1) est 25.\nLa m√©diane (Q2) est 45.\nLa moyenne est 42.14.\nLe troisi√®me quartile (Q3) est 55.\nLa valeur maximale est 75.\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SUMMARY()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/variance.html",
    "href": "pages/fonctions/agregation/variance.html",
    "title": "VAR()",
    "section": "",
    "text": "La fonction var() permet de calculer la variance d‚Äôun ensemble de valeurs num√©riques. La variance mesure la dispersion des donn√©es autour de leur moyenne. Plus la variance est √©lev√©e, plus les valeurs sont dispers√©es.\nLa variance (\\(sigma^2\\) pour une population, \\(s^2\\) pour un √©chantillon) est d√©finie par la formule suivante :\n\\[\ns^2 = \\frac{1}{n-1} \\sum_{i=1}^{n} (x_i - \\bar{x})^2\n\\]\no√π :",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "VAR()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/variance.html#syntaxe",
    "href": "pages/fonctions/agregation/variance.html#syntaxe",
    "title": "VAR()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction est simple : il suffit d‚Äôindiquer les valeurs ou la variable dont on souhaite obtenir la variance. Voici la syntaxe de base pour calculer la variance d‚Äôune variable dans un data frame :\nvar(data$ma_variable)",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "VAR()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/variance.html#exemple",
    "href": "pages/fonctions/agregation/variance.html#exemple",
    "title": "VAR()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction var() pour calculer la variance d‚Äôun ensemble de chiffres. Il suffit de passer les nombres sous forme d‚Äôun vecteur dans la fonction.\n---\nvar(c(1,2,3,4,5))\n---\n\n\n[1] 2.5\n\n\nIci, la variance est 2.5, ce qui repr√©sente la dispersion des valeurs autour de leur moyenne.\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "VAR()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/sd.html",
    "href": "pages/fonctions/agregation/sd.html",
    "title": "SD()",
    "section": "",
    "text": "La fonction sd() permet de calculer l‚Äô√©cart-type d‚Äôun ensemble de valeurs num√©riques. L‚Äô√©cart-type mesure la dispersion des donn√©es autour de leur moyenne. Plus l‚Äô√©cart-type est √©lev√©, plus les valeurs sont dispers√©es.\nL‚Äô√©cart-type (\\(\\sigma\\) pour une population, \\(s\\) pour un √©chantillon) est d√©fini par la formule suivante :\n\\[\ns = \\sqrt{\\frac{1}{n-1} \\sum_{i=1}^{n} (x_i - \\bar{x})^2}\n\\]\no√π :",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SD()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/sd.html#syntaxe",
    "href": "pages/fonctions/agregation/sd.html#syntaxe",
    "title": "SD()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction est simple : il suffit d‚Äôindiquer les valeurs ou la variable dont on souhaite obtenir l‚Äô√©cart-type. Voici la syntaxe de base pour calculer l‚Äô√©cart-type d‚Äôune variable dans un data frame :\nsd(data$ma_variable)",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SD()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/sd.html#exemple",
    "href": "pages/fonctions/agregation/sd.html#exemple",
    "title": "SD()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction sd() pour calculer l‚Äô√©cart-type d‚Äôun ensemble de chiffres. Il suffit de passer les nombres sous forme d‚Äôun vecteur dans la fonction.\n---\nsd(c(1,2,3,4,5))\n---\n\n\n[1] 1.581139\n\n\nIci, l‚Äô√©cart-type est 1.58, ce qui indique la dispersion des valeurs autour de leur moyenne.\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "SD()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/maximum.html",
    "href": "pages/fonctions/agregation/maximum.html",
    "title": "MAX()",
    "section": "",
    "text": "La fonction max() permet de calculer la valeur maximale d‚Äôun objet num√©rique (vecteur, matrice, variable‚Ä¶). Elle renvoie la plus grande valeur parmi celles pr√©sentes dans l‚Äôobjet, en ignorant automatiquement les valeurs manquantes (NA) si sp√©cifi√©.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MAX()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/maximum.html#syntaxe",
    "href": "pages/fonctions/agregation/maximum.html#syntaxe",
    "title": "MAX()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction est simple, il suffit d‚Äôindiquer les valeurs ou la variable pour laquelle vous souhaitez trouver la valeur maximale. Voici la syntaxe de base pour obtenir la valeur maximale d‚Äôune variable dans un data frame, par exemple :\n---\nmax(data$ma_variable)\n---",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MAX()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/maximum.html#exemple",
    "href": "pages/fonctions/agregation/maximum.html#exemple",
    "title": "MAX()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction max() pour obtenir la valeur maximale parmi plusieurs chiffres. Il suffit de passer les nombres dans la fonction, en les s√©parant par des virgules. La fonction calcule ensuite la plus grande valeur parmi ces nombres.\n---\nmax(1,2,3)\n---\n\n\n[1] 3\n\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MAX()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/minimum.html",
    "href": "pages/fonctions/agregation/minimum.html",
    "title": "MIN()",
    "section": "",
    "text": "La fonction min() permet de calculer la valeur minimale d‚Äôun objet num√©rique (vecteur, matrice, variable ‚Ä¶). Elle renvoie la plus petite valeur parmi celles pr√©sentes dans l‚Äôobjet, en ignorant automatiquement les valeurs manquantes (NA) si sp√©cifi√©.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MIN()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/minimum.html#syntaxe",
    "href": "pages/fonctions/agregation/minimum.html#syntaxe",
    "title": "MIN()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction est simple, il suffit d‚Äôindiquer les valeurs ou la variable pour laquelle vous souhaitez trouver la valeur minimale. Voici la syntaxe de base pour obtenir la valeur minimale d‚Äôune variable dans un data frame, par exemple :\n---\nmin(data$ma_variable)\n---",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MIN()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/minimum.html#exemple",
    "href": "pages/fonctions/agregation/minimum.html#exemple",
    "title": "MIN()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction min() pour obtenir la valeur minimale parmi plusieurs chiffres. Il suffit de passer les nombres dans la fonction, en les s√©parant par des virgules. La fonction calcule ensuite la plus petite valeur parmi ces nombres.\n---\nmin(1,2,3)\n---\n\n\n[1] 1\n\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "MIN()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/range.html",
    "href": "pages/fonctions/agregation/range.html",
    "title": "RANGE()",
    "section": "",
    "text": "La fonction range() permet d‚Äôobtenir l‚Äô√©tendue d‚Äôun ensemble de valeurs num√©riques, c‚Äôest-√†-dire la plus petite et la plus grande valeur du jeu de donn√©es. Elle est utile pour conna√Ætre rapidement l‚Äôamplitude des donn√©es.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "RANGE()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/range.html#syntaxe",
    "href": "pages/fonctions/agregation/range.html#syntaxe",
    "title": "RANGE()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de la fonction range() se fait en lui passant un vecteur num√©rique. Elle renvoie un vecteur de deux √©l√©ments : le minimum et le maximum.\n---\nrange(data$ma_variable)\n---",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "RANGE()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/range.html#exemple",
    "href": "pages/fonctions/agregation/range.html#exemple",
    "title": "RANGE()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction range() pour d√©terminer l‚Äô√©tendue d‚Äôun ensemble de nombres. Il suffit de passer les valeurs dans la fonction, et celle-ci renverra le plus petit et le plus grand nombre du jeu de donn√©es.\n---\nrange(5,10,2,8,3)\n---\n\n\n[1]  2 10\n\n\nIci, la valeur minimale est 2 et la valeur maximale est 10.\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "RANGE()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/table.html",
    "href": "pages/fonctions/agregation/table.html",
    "title": "TABLE()",
    "section": "",
    "text": "La fonction table() permet de calculer la fr√©quence des valeurs pr√©sentes dans un vecteur ou un jeu de donn√©es. Elle est particuli√®rement utile pour analyser la r√©partition des cat√©gories dans un facteur ou une variable qualitative.\nSi plusieurs vecteurs sont pass√©s en argument, table() g√©n√®re un tableau de contingence, utile pour analyser la distribution conjointe de plusieurs variables.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "TABLE()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/table.html#syntaxe",
    "href": "pages/fonctions/agregation/table.html#syntaxe",
    "title": "TABLE()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de table() est simple : il suffit de lui passer un vecteur ou plusieurs vecteurs pour obtenir un comptage des valeurs.\ntable(data$ma_variable)\n\ntable(x)\n\ntable(x, y) # Plusieurs vecteurs pour un tableau de contingence\nx est un vecteur (num√©rique, caract√®re ou facteur).",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "TABLE()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/table.html#exemple",
    "href": "pages/fonctions/agregation/table.html#exemple",
    "title": "TABLE()",
    "section": "Exemple",
    "text": "Exemple\n\nExemlpe 1\nDans ce premier exemple, nous allons utiliser la fonction table() pour compter la fr√©quence des √©l√©ments d‚Äôun vecteur contenant des cat√©gories.\n---\nfruits &lt;- c(\"Pomme\", \"Banane\", \"Pomme\", \"Orange\", \"Banane\", \"Pomme\", \"Orange\")\n\ntable(fruits)\n---\n\n\nfruits\nBanane Orange  Pomme \n     2      2      3 \n\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "TABLE()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/prod.html",
    "href": "pages/fonctions/agregation/prod.html",
    "title": "PROD()",
    "section": "",
    "text": "La fonction prod() permet de calculer le produit des √©l√©ments d‚Äôun objet num√©rique (vecteur, matrice, variable ‚Ä¶). Elle multiplie uniquement les valeurs num√©riques et ignore automatiquement les valeurs manquantes (NA).",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "PROD()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/prod.html#syntaxe",
    "href": "pages/fonctions/agregation/prod.html#syntaxe",
    "title": "PROD()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction est simple : il suffit d‚Äôindiquer les valeurs ou la variable contenant les √©l√©ments √† multiplier.\n---\nprod(data$ma_variable)\n---",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "PROD()"
    ]
  },
  {
    "objectID": "pages/fonctions/agregation/prod.html#exemple",
    "href": "pages/fonctions/agregation/prod.html#exemple",
    "title": "PROD()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans cet exemple, nous allons utiliser la fonction prod() pour multiplier plusieurs nombres. Il suffit de passer les valeurs dans la fonction, s√©par√©es par des virgules :\n---\nprod(2,3,4)\n---\n\n\n[1] 24\n\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Aggr√©gation",
      "PROD()"
    ]
  },
  {
    "objectID": "pages/fonctions/manipulation/apply.html",
    "href": "pages/fonctions/manipulation/apply.html",
    "title": "APPLY()",
    "section": "",
    "text": "La fonction apply() permet d‚Äôappliquer une fonction √† chaque ligne ou colonne d‚Äôune matrice ou d‚Äôun dataframe. Elle est particuli√®rement utile pour √©viter les boucles for et rendre le code plus concis et efficace.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Manipulation de donn√©es",
      "APPLY()"
    ]
  },
  {
    "objectID": "pages/fonctions/manipulation/apply.html#syntaxe",
    "href": "pages/fonctions/manipulation/apply.html#syntaxe",
    "title": "APPLY()",
    "section": "Syntaxe",
    "text": "Syntaxe\nLa fonction s‚Äôutilise en indiquant l‚Äôobjet √† manipuler, la dimension sur laquelle appliquer la fonction et la fonction elle-m√™me. Voici la syntaxe g√©n√©rale :\n---\napply(X, MARGIN, FUN, ...)\n---\no√π :\n\nX est la matrice ou le dataframe,\nMARGIN = 1 applique la fonction aux lignes, MARGIN = 2 aux colonnes,\nFUN est la fonction √† appliquer (par exemple sum, mean, etc.).",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Manipulation de donn√©es",
      "APPLY()"
    ]
  },
  {
    "objectID": "pages/fonctions/manipulation/apply.html#exemple",
    "href": "pages/fonctions/manipulation/apply.html#exemple",
    "title": "APPLY()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons calculer la moyenne de chaque colonne d‚Äôune matrice gr√¢ce √† apply() :\n---\nmat &lt;- matrix(1:9, nrow = 3, byrow = TRUE) # Cr√©ation d'une matrice\n\napply(mat, 2, mean) # Moyenne des colonnes\n---\n\n\n[1] 4 5 6\n\n\n\n\nExemple 2",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Manipulation de donn√©es",
      "APPLY()"
    ]
  },
  {
    "objectID": "pages/fonctions/manipulation/cbind.html",
    "href": "pages/fonctions/manipulation/cbind.html",
    "title": "CBIND()",
    "section": "",
    "text": "La fonction cbind() permet de combiner plusieurs vecteurs ou colonnes d‚Äôun dataframe en les accolant c√¥te √† c√¥te. Elle est utile pour fusionner des donn√©es de mani√®re horizontale.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Manipulation de donn√©es",
      "CBIND()"
    ]
  },
  {
    "objectID": "pages/fonctions/manipulation/cbind.html#syntaxe",
    "href": "pages/fonctions/manipulation/cbind.html#syntaxe",
    "title": "CBIND()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction se fait en indiquant les objets √† combiner :\n---\ncbind(dataframe1, dataframe2, ...)\n---",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Manipulation de donn√©es",
      "CBIND()"
    ]
  },
  {
    "objectID": "pages/fonctions/manipulation/cbind.html#exemple",
    "href": "pages/fonctions/manipulation/cbind.html#exemple",
    "title": "CBIND()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans cet exemple, nous allons combiner deux vecteurs pour former une matrice :\n---\nvecteur1 &lt;- c(1, 2, 3)\nvecteur2 &lt;- c(4, 5, 6)\nmatrice &lt;- cbind(vecteur1, vecteur2)\nprint(matrice)\n---\n\n\n     vecteur1 vecteur2\n[1,]        1        4\n[2,]        2        5\n[3,]        3        6\n\n\n\n\nExemple 2\nOn utilise maintenant cbind pour combiner deux datarfame :\n---\ndf1 &lt;- data.frame(A = c(1, 2), B = c(\"a\", \"b\"))\ndf2 &lt;- data.frame(A = c(3, 4), B = c(\"c\", \"d\"))\nresultat &lt;- cbind(df1, df2)\nprint(resultat)\n---\n\n\n  A B C D\n1 1 w 3 y\n2 2 x 4 z\n\n\nIci, les colonnes du second dataframe sont ajout√©es au premier, tant que leurs taille est identique.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Manipulation de donn√©es",
      "CBIND()"
    ]
  },
  {
    "objectID": "pages/fonctions/manipulation/rbind.html",
    "href": "pages/fonctions/manipulation/rbind.html",
    "title": "RBIND()",
    "section": "",
    "text": "La fonction rbind() permet de combiner des objets de type tableau (matrices, data frames) en ajoutant de nouvelles lignes. Elle est particuli√®rement utile pour empiler des jeux de donn√©es partageant les m√™mes colonnes.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Manipulation de donn√©es",
      "RBIND()"
    ]
  },
  {
    "objectID": "pages/fonctions/manipulation/rbind.html#syntaxe",
    "href": "pages/fonctions/manipulation/rbind.html#syntaxe",
    "title": "RBIND()",
    "section": "Syntaxe",
    "text": "Syntaxe\nL‚Äôutilisation de cette fonction se fait en indiquant les objets √† combiner :\n---\nrbind(dataframe1, dataframe2, ...)\n---\nIl est important que les objets aient le m√™me nombre de colonnes et que leurs types soient compatibles, sinon une erreur se produira.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Manipulation de donn√©es",
      "RBIND()"
    ]
  },
  {
    "objectID": "pages/fonctions/manipulation/rbind.html#exemple",
    "href": "pages/fonctions/manipulation/rbind.html#exemple",
    "title": "RBIND()",
    "section": "Exemple",
    "text": "Exemple\n\nExemple 1\nDans ce premier exemple, nous allons utiliser la fonction rbind() pour empiler deux matrices ayant le m√™me nombre de colonnes.\n---\nmat1 &lt;- matrix(1:6, nrow = 2, ncol = 3) # De 1 √† 6\nmat2 &lt;- matrix(7:12, nrow = 2, ncol = 3) # De 7 √† 12\nresultat &lt;- rbind(mat1, mat2)\nprint(resultat)\n---\n\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n[3,]    7    9   11\n[4,]    8   10   12\n\n\nCela produit une nouvelle matrice avec les lignes de mat1 suivies de celles de mat2.\n\n\nExemple 2\nOn utilise maintenant rbind pour combiner deux dataframe :\n---\ndf1 &lt;- data.frame(A = c(1, 2), B = c(\"a\", \"b\"))\ndf2 &lt;- data.frame(A = c(3, 4), B = c(\"c\", \"d\"))\nresultat &lt;- rbind(df1, df2)\nprint(resultat)\n---\n\n\n  A B\n1 1 a\n2 2 b\n3 3 c\n4 4 d\n\n\nIci, les lignes du second dataframe sont ajout√©es au premier, tant que les colonnes sont identiques.",
    "crumbs": [
      "Accueil",
      "Fonctions R",
      "Manipulation de donn√©es",
      "RBIND()"
    ]
  },
  {
    "objectID": "pages/shiny/introduction_shiny.html",
    "href": "pages/shiny/introduction_shiny.html",
    "title": "Introduction √† Shiny",
    "section": "",
    "text": "Pr√©sentation\nShiny est un package qui permet de cr√©er facilement des applications web interactives, enti√®rement en R, sans n√©cessit√© de connaissances en HTML, CSS ou JavaScript. Il fournit un ensemble d‚Äôoutils puissants pour concevoir des interfaces dynamiques et r√©actives, facilitant ainsi l‚Äôexploration et la visualisation des donn√©es en temps r√©el. Les applications Shiny peuvent √™tre ensuite d√©ploy√©es localement, sur un server ou via des plateformes comme ShinyApps.io, permettant ainsi de partager des analyses avec d‚Äôautres utilisateurs de mani√®re simple et efficace.\n\n\n\nExemple d‚Äôapplication Shiny d√©velopp√© avec R\n\n\n\n\nOrigine\nCe framework web, gratuit et open source, a √©t√© annonc√© en 2012 par Joe Cheng, directeur technique de Posit (anciennement RStudio). Con√ßu pour simplifier le d√©veloppement d‚Äôapplications web interactives, il √©tait initialement disponible en R, mais depuis 2022, il peut √©galement √™tre utilis√© avec Python. L‚Äôun des usages courants de Shiny est le prototypage rapide.\n\n\n\n\n\n\nFramework\n\n\n\n\n\nStructure logicielle qui fournit un ensemble d‚Äôoutils, de biblioth√®ques et de bonnes pratiques pour faciliter le d√©veloppement d‚Äôapplications. Il sert de socle sur lequel nous pouvons construire un projet sans repartir de z√©ro.\n\n\n\n\n\n\n\n\n\nPrototypage rapide\n\n\n\n\n\nCapacit√© √† concevoir et √† tester rapidementt des applications, sans avoir √† passer par un d√©veloppement web traditionnel impliquant HTML, CSS, JS ‚Ä¶\n\n\n\nL‚Äôimpl√©mentation distincte de Shiny annonc√© en 2022 ne vise pas √† remplacer la version R. Les deux versions sont d√©velopp√©es en parall√®le et pourraient ne jamais inclure les m√™mes fonctionnalit√©s.\n\n\nAvantages\nShiny est beaucoup plus utilis√© qu‚Äôon ne le pense. Entreprises, chercheurs, institutions acad√©miques ou encore organisations gouvernementales l‚Äôutilisent pour cr√©er des applications web interactives.\nEn effet, Shiny est gratuit et open-source ce qui en fait un outil accessible et flexible. D√©velopper une application interactive et visuellement attrayante devient relativement simple lorsqu‚Äôon ma√Ætrise R üòâ. Dans le cas √©ch√©ant, pas d‚Äôinqui√©tude, de nombreux exemples et templates existent. Vous pourrez les r√©utiliser et les adapter √† votre projet.\nUn des principaux avantages de Shiny est qu‚Äôil est bas√© sur R et int√©gr√© √† RStudio, ce qui permet d‚Äôincorporer toutes les fonctionnalit√©s d‚Äôanalyse de R dans les applications.‚Äù\nEnfin, les applications sont compl√®tement personnalisables avec du HTML et du CSS, qui sont les langages de base pour la cr√©ation de pages web.\nEn revanche, Shiny est sp√©cifiquement con√ßu pour R, ce qui peut poser des difficult√©s pour ceux qui ne sont pas familiers avec ce langage. De plus, compar√© √† d‚Äôautres frameworks, Shiny peut √™tre un peu limit√© en termes de personnalisation du front-end et de scalabilit√©.\n\n\nComment √ßa marche ?\nTout d‚Äôabord, le code d‚Äôune application Shiny est contenu dans un fichier au format .R. L‚Äôanatomie de ce fichier est particuli√®re, aucune inqui√©tude, elle est en r√©alit√© tr√®s simple.\nElle se divise en deux parties principales :\n\nUser Interface (ui) : Cette partie regroupe tous les √©l√©ments visibles par l‚Äôutilisateur, tels que le titre, les composants, la mise en forme, les boutons‚Ä¶ Concr√®tement, dans le langage des d√©veloppeurs, c‚Äôest le front de l‚Äôapplication. C‚Äôest tout ce que l‚Äôutilisateur de l‚Äôapplication voit et avec quoi il interagit. Cette partie contr√¥le la pr√©sentation et l‚Äôapparence de l‚Äôapplication.\nServer function (server) : La partie server contient toutes les instructions n√©cessaires au fonctionnement de l‚Äôapplication. Dans le langage des d√©veloppeurs, elle correspond au back-end`, c‚Äôest-√†-dire la partie de l‚Äôapplication qui g√®re la logique, les calculs et les donn√©es. Elle contient le code qui d√©finit comment r√©agir aux actions de l‚Äôutilisateur.\n\nui &lt;- fluidPage()\n\nserver &lt;- function(input, output, session) {}\n\nshinyApp(ui, server)\nL‚Äôinstruction shinyApp(ui, server) permet de lancer une application Shiny en combinant l‚Äôinterface utilisateur (ui) et la logique serveur (server). Lorsqu‚Äôon ex√©cute cette commande, l‚Äôapplication Shiny d√©marre et devient interactive.\nOn se retrouve ici pour un tutoriel et pour r√©aliser votre premi√®re application !",
    "crumbs": [
      "Accueil",
      "Shiny",
      "Introduction √† Shiny"
    ]
  }
]